plugins {
    id "com.jfrog.bintray" version "1.8.4"
}

def VERSION_NAME = "3.0.0"

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
version VERSION_NAME

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion 28

    testOptions.unitTests.includeAndroidResources = true

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 300
        versionName VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    /*RollBar analytics toll dependency*/
    implementation 'com.rollbar:rollbar-java:1.+'
    implementation 'com.rollbar:rollbar-android:1.+@aar'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api 'com.google.guava:guava:27.0.1-android'
    implementation 'com.loopj.android:android-async-http:1.4.9'

    //junit
    testImplementation 'junit:junit:4.12'
    //  Mockito framework
    testImplementation 'org.mockito:mockito-core:2.19.0'

    testImplementation 'org.robolectric:robolectric:4.2.1'

    //json jar
    testImplementation 'org.json:json:20140107'

    // Unfortunately consent-string-sdk-java only supports Java 8 and above. That means API > 26
    // The following is a port to android environment
    // for more information check https://github.com/InteractiveAdvertisingBureau/Consent-String-SDK-Java/issues/21
    api 'com.iab.gdpr_android:gdpr_android:1.0.1'
    androidTestImplementation 'junit:junit:4.12'
//    implementation 'com.conversantmedia.gdpr:consent-string-sdk-java:3.0.2'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

/*task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
*/
artifacts {
    //archives javadocJar
    archives sourcesJar
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id properties.getProperty("bintray.user")
            name "Sourcepoint"
            email properties.getProperty("bintray.email")
        }
    }

    scm {
        url "https://github.com/SourcePointUSA/android-cmp-app"
    }
}


publishing {
    publications {
        POM(MavenPublication) {
            artifact("$buildDir/outputs/aar/cmplibrary-release.aar")
            artifact sourcesJar
            groupId 'com.sourcepoint.cmplibrary'
            artifactId 'cmplibrary'
            version VERSION_NAME
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                def root = asNode()
                root.appendNode('description', 'mvp architecture for android')
                root.appendNode('name', 'mvp-arch-android')
                root.appendNode('url', 'https://github.com/linjonh/MvpArch')
                root.children().last() + pomConfig
                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    logger.log(LogLevel.ERROR,"allDependencies.each:====>"+it.toString()+"\n")

                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

}

bintray {
    user =  properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['POM']
    configurations = ['archives']
    override = true
    pkg {
        repo = 'sourcepoint'
        name = 'cmplibrary'
        publish = true
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/SourcePointUSA/android-cmp-app'
        dryRun = true
        publicDownloadNumbers = true

        version {
            name = VERSION_NAME
            desc = 'SourcePoint CMP Lib'
            released  = new Date()
            vcsTag = VERSION_NAME
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

task copyAARToZip(type: Copy) {
    from "$buildDir/outputs/aar/cmplibrary-release.aar"
    into "$buildDir/zip/com/sourcepoint/cmplibrary/cmplibrary/$VERSION_NAME"
    rename "cmplibrary-release.aar", "cmplibrary-$VERSION_NAME" + ".aar"
}

task copySourcesToZip(type: Copy) {
    from "$buildDir/libs/cmplibrary-$VERSION_NAME-sources.jar"
    into "$buildDir/zip/com/sourcepoint/cmplibrary/cmplibrary/$VERSION_NAME"
}

task copyPOMToZip(type: Copy) {
    from "$buildDir/publications/POM/pom-default.xml"
    into "$buildDir/zip/com/sourcepoint/cmplibrary/cmplibrary/$VERSION_NAME"
    rename "pom-default.xml", "cmplibrary-$VERSION_NAME" + ".pom"
}

task createZip(type: Zip) {
    from "$buildDir/zip"
    destinationDir = file("$buildDir")
    archiveName = "cmplibrary-$VERSION_NAME" + ".zip"
}

task bundleZip {
    def tasks = [sourcesJar, generatePomFileForPOMPublication, copySourcesToZip, copyPOMToZip, copyAARToZip, createZip]
    for (int i = 0; i < tasks.size() - 1; i++) {
        tasks[i + 1].mustRunAfter(tasks[i])
    }
    dependsOn(tasks)
}