apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply from: rootDir.path + '/gradleutils/test_config.gradle'

android {
    compileSdk 34
    defaultConfig {
        applicationId "com.sourcepoint.app.v6"
        minSdk 21
        targetSdk 33
        versionCode 2
        versionName "1.0.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    adbOptions {
        installOptions '-g', '-r'
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        stage {
            initWith debug
            applicationIdSuffix ".stage"
        }
        localProd {
            initWith debug
            applicationIdSuffix ".localProd"
        }
        preprod {
            initWith debug
            applicationIdSuffix ".preprod"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:26.1.0'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
}

dependencies {

    implementation fileTree(include: ['*.aar'], dir: 'libs')

    // kotlin
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //noinspection GradleCompatible
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation(Libs.androidxCore)

    implementation project(":cmplibrary")
//    implementation 'com.sourcepoint.cmplibrary:cmplibrary:6.0.3'

    // Koin
    implementation "org.koin:koin-core:2.0.1"
    implementation "org.koin:koin-core-ext:2.0.1"
    implementation "org.koin:koin-android:2.0.1"
    implementation "org.koin:koin-java:2.0.1"
    androidTestImplementation "org.koin:koin-test:2.0.1"

    // mockk
    androidTestImplementation(Libs.mockkAndroid)

    androidTestImplementation group: 'androidx.test.uiautomator', name: 'uiautomator', version: '2.3.0'

    def reportsDirectory = "$buildDir/reports/androidTests/connected"

    def embedScreenshotsTask = task('embedScreenshots', group: 'reporting') {
        doFirst {
            def failureScreenshotsDirectory = new File(reportsDirectory, 'screenshots/failures')

            if (!failureScreenshotsDirectory.exists()) {
                println 'Could not find screenshot failures. Skipping...'
                return
            }

            failureScreenshotsDirectory.eachFile { failedTestClassDirectory ->
                def failedTestClassName = failedTestClassDirectory.name

                failedTestClassDirectory.eachFile { failedTestFile ->
                    def failedTestName = failedTestFile.name
                    def failedTestNameWithoutExtension = failedTestName.take(failedTestName.lastIndexOf('.'))
                    def failedTestClassJunitReportFile = new File(reportsDirectory, "${failedTestClassName}.html")

                    if (!failedTestClassJunitReportFile.exists()) {
                        println "Could not find JUnit report file for test class '${failedTestClassJunitReportFile}'"
                        return
                    }

                    def failedTestJunitReportContent = failedTestClassJunitReportFile.text

                    def patternToFind = "<h3 class=\"failures\">${failedTestNameWithoutExtension}</h3>"
                    def patternToReplace = "${patternToFind} <img src=\"screenshots/failures/${failedTestClassName}/${failedTestName}\" width =\"360\" />"

                    failedTestJunitReportContent = failedTestJunitReportContent.replaceAll(patternToFind, patternToReplace)

                    failedTestClassJunitReportFile.write(failedTestJunitReportContent)
                }
            }
        }
    }

    def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
        executable "${android.getAdbExe().toString()}"
        args 'shell', 'rm', '-r', '/sdcard/Pictures/my_app_folder'
        finalizedBy {
            embedScreenshotsTask
        }
    }

    def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
        executable "${android.getAdbExe().toString()}"
        args 'shell', 'mkdir', '-p', '/sdcard/Pictures/my_app_folder'
    }

    def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
        executable "${android.getAdbExe().toString()}"
        args 'pull', '/sdcard/Pictures/my_app_folder/.', reportsDirectory
        finalizedBy {
            clearScreenshotsTask
        }

        dependsOn {
            createScreenshotDirectoryTask
        }

        doFirst {
            new File(reportsDirectory).mkdirs()
        }
    }

    tasks.configureEach { task ->
        if (task.name == 'connectedDebugAndroidTest') {
            task.finalizedBy {
                fetchScreenshotsTask
            }
        }
    }
}
